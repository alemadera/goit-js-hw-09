{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAGC,SAAQC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAELC,KAAKC,SAAW,GAgBpCC,YAbqB,KAEpBJ,EAAO,C,SAAEH,E,MAAUC,GAAQ,GAWDA,GAG1BM,YAVmB,KAEnBH,EAAM,C,SAAEJ,E,MAAUC,GAAQ,GAQDA,EAAM,G,CAMtCO,SAASC,iBAAiB,oBAAoB,KAE5C,MAAMC,EAAOF,SAASG,cAAc,SAGnCD,EAAID,iBAAiB,UAAWG,IAE/BA,EAAMC,iBAGN,MAAMC,EAAW,IAAIC,SAASL,GACxBM,EAAaC,OAAOH,EAASI,IAAI,UACjCC,EAAYF,OAAOH,EAASI,IAAI,SAChCE,EAASH,OAAOH,EAASI,IAAI,WAEnC,IAAIG,EAAeL,EAGnB,IAAK,IAAIM,EAAI,EAAGA,GAAKF,EAAQE,IAEzBvB,EAAYuB,EAAGD,GACdE,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MAEjBuB,EAAA3B,GAAS4B,OAAOC,QAAQ,uBAAqB1B,QAAiBC,MAAU,IAEzE0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAElBuB,EAAA3B,GAAS4B,OAAOG,QAAQ,sBAAoB5B,QAAeC,MAAU,IAIzEoB,GAAgBF,C,GAElB","sources":["src/js/03-promises.js"],"sourcesContent":["// Importa la biblioteca Notiflix\nimport Notiflix from 'notiflix';\n\n// Función para crear una Promise\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    // Genera un valor aleatorio para decidir si la Promise se resolverá o se rechazará\n    const shouldResolve = Math.random() > 0.3;\n\n    // Función para resolver la Promise\n    const fulfillPromise = () => {\n      // Resuelve la Promise con un objeto que contiene la posición y el retraso\n      resolve({ position, delay }); \n    };\n\n    // Función para rechazar la Promise\n    const rejectPromise = () => {\n      // Rechaza la Promise con un objeto que contiene la posición y el retraso\n      reject({ position, delay }); \n    };\n\n    // Si se debe resolver la Promise, ejecutar fulfillPromise después del retraso\n    if (shouldResolve) {\n      setTimeout(fulfillPromise, delay);\n    } else {\n      // Si se debe rechazar la Promise, ejecutar rejectPromise después del retraso\n      setTimeout(rejectPromise, delay);\n    }\n  });\n}\n\n// Espera a que el contenido del DOM se haya cargado completamente\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Obtiene referencia al formulario\n  const form = document.querySelector('.form');\n\n  // Agrega un controlador de evento para el evento de envío del formulario\n  form.addEventListener('submit', (event) => {\n    // Evita el comportamiento predeterminado de enviar el formulario\n    event.preventDefault(); \n\n    // Obtiene los datos del formulario\n    const formData = new FormData(form);\n    const firstDelay = Number(formData.get('delay')); // Primer retraso en milisegundos\n    const delayStep = Number(formData.get('step')); // Paso de incremento de retraso\n    const amount = Number(formData.get('amount')); // Cantidad de Promises a crear\n\n    let currentDelay = firstDelay; // Inicializa el retraso actual\n\n    // Itera sobre la cantidad de Promises especificada\n    for (let i = 1; i <= amount; i++) {\n      // Llama a la función createPromise con la posición y el retraso actual\n      createPromise(i, currentDelay)\n        .then(({ position, delay }) => {\n          // Notifica al usuario que la Promise se ha resuelto con éxito\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          // Notifica al usuario que la Promise ha sido rechazada\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n\n      // Actualiza el retraso actual para la siguiente Promise\n      currentDelay += delayStep;\n    }\n  });\n});\n\n"],"names":["$1GAPJ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","Math","random","setTimeout","document","addEventListener","form","querySelector","event","preventDefault","formData","FormData","firstDelay","Number","get","delayStep","amount","currentDelay","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.2d192d15.js.map"}